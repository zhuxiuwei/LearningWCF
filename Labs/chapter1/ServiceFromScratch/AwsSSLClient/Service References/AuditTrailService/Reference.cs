//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AwsSSLClient.AuditTrailService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WebServiceResponse", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.AdCenter.LogStoreWebService")]
    [System.SerializableAttribute()]
    public partial class WebServiceResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AwsSSLClient.AuditTrailService.WebServiceResponseCode CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AwsSSLClient.AuditTrailService.WebServiceResponseCode Code {
            get {
                return this.CodeField;
            }
            set {
                if ((this.CodeField.Equals(value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WebServiceResponseCode", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.AdCenter.LogStoreWebService")]
    public enum WebServiceResponseCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DATA_ERROR = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INFRASTRUCTURE_ERROR = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuditTrailService.IAuditTrailService")]
    public interface IAuditTrailService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuditTrailService/InsertData", ReplyAction="http://tempuri.org/IAuditTrailService/InsertDataResponse")]
        void InsertData(string typeName, byte[][] payLoadCollection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuditTrailService/InsertData", ReplyAction="http://tempuri.org/IAuditTrailService/InsertDataResponse")]
        System.Threading.Tasks.Task InsertDataAsync(string typeName, byte[][] payLoadCollection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuditTrailService/InsertDataBulk", ReplyAction="http://tempuri.org/IAuditTrailService/InsertDataBulkResponse")]
        AwsSSLClient.AuditTrailService.WebServiceResponse[] InsertDataBulk(string typeName, byte[][] payLoadCollection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuditTrailService/InsertDataBulk", ReplyAction="http://tempuri.org/IAuditTrailService/InsertDataBulkResponse")]
        System.Threading.Tasks.Task<AwsSSLClient.AuditTrailService.WebServiceResponse[]> InsertDataBulkAsync(string typeName, byte[][] payLoadCollection);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAuditTrailService/InsertDataBulkOneWay")]
        void InsertDataBulkOneWay(string typeName, byte[][] payLoadCollection);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAuditTrailService/InsertDataBulkOneWay")]
        System.Threading.Tasks.Task InsertDataBulkOneWayAsync(string typeName, byte[][] payLoadCollection);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuditTrailServiceChannel : AwsSSLClient.AuditTrailService.IAuditTrailService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuditTrailServiceClient : System.ServiceModel.ClientBase<AwsSSLClient.AuditTrailService.IAuditTrailService>, AwsSSLClient.AuditTrailService.IAuditTrailService {
        
        public AuditTrailServiceClient() {
        }
        
        public AuditTrailServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuditTrailServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuditTrailServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuditTrailServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void InsertData(string typeName, byte[][] payLoadCollection) {
            base.Channel.InsertData(typeName, payLoadCollection);
        }
        
        public System.Threading.Tasks.Task InsertDataAsync(string typeName, byte[][] payLoadCollection) {
            return base.Channel.InsertDataAsync(typeName, payLoadCollection);
        }
        
        public AwsSSLClient.AuditTrailService.WebServiceResponse[] InsertDataBulk(string typeName, byte[][] payLoadCollection) {
            return base.Channel.InsertDataBulk(typeName, payLoadCollection);
        }
        
        public System.Threading.Tasks.Task<AwsSSLClient.AuditTrailService.WebServiceResponse[]> InsertDataBulkAsync(string typeName, byte[][] payLoadCollection) {
            return base.Channel.InsertDataBulkAsync(typeName, payLoadCollection);
        }
        
        public void InsertDataBulkOneWay(string typeName, byte[][] payLoadCollection) {
            base.Channel.InsertDataBulkOneWay(typeName, payLoadCollection);
        }
        
        public System.Threading.Tasks.Task InsertDataBulkOneWayAsync(string typeName, byte[][] payLoadCollection) {
            return base.Channel.InsertDataBulkOneWayAsync(typeName, payLoadCollection);
        }
    }
}
